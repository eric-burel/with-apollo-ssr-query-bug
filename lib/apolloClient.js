import { useMemo } from 'react'
import { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client'
import { concatPagination } from '@apollo/client/utilities'

import fetch from "isomorphic-unfetch";
let customFetch = fetch;
// Wrap with node-fetch-har that will generate logs for the requests generated by Apollo, server-side
const { withHar } = require("node-fetch-har");
customFetch = withHar(customFetch, {
  // TODO: in the future that should generate JSON downloadable dumps
  onHarEntry: entry => {
    const { request, response } = entry;
    const status = response.status;
    console.log("--- Intercepted a fetch request");
    const requestTable = [];
    requestTable.push(["url", request.url]);
    if (status !== 200) {
      requestTable.push(
        ...request.headers.map(h => [
          h.name,
          h.value.length > 50 ? h.value.slice(0, 50) + "..." : h.value
        ])
      );
      requestTable.push(["data", request.postData.text.slice(0, 80) + "..."]);
    }
    console.table(requestTable);
    if (status !== 200) {
      console.log("--- Response");
      console.table([["status", response.status]]);
    }
  }
  // naive strategy, we can do better with Next @see https://github.com/exogen/next-fetch-har
});


let apolloClient

function createApolloClient() {
  return new ApolloClient({
    ssrMode: typeof window === 'undefined',
    link: new HttpLink({
      fetch: customFetch,
      uri: 'https://nextjs-graphql-with-prisma-simple.vercel.app/api', // Server URL (must be absolute)
      credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`
    }),
    cache: new InMemoryCache({
      typePolicies: {
        Query: {
          fields: {
            allPosts: concatPagination(),
          },
        },
      },
    }),
  })
}

export function initializeApollo(initialState = null) {
  const _apolloClient = apolloClient ?? createApolloClient()

  // If your page has Next.js data fetching methods that use Apollo Client, the initial state
  // gets hydrated here
  if (initialState) {
    // Get existing cache, loaded during client side data fetching
    const existingCache = _apolloClient.extract()
    // Restore the cache using the data passed from getStaticProps/getServerSideProps
    // combined with the existing cached data
    _apolloClient.cache.restore({ ...existingCache, ...initialState })
  }
  // For SSG and SSR always create a new Apollo Client
  if (typeof window === 'undefined') return _apolloClient
  // Create the Apollo Client once in the client
  if (!apolloClient) apolloClient = _apolloClient

  return _apolloClient
}

export function useApollo(initialState) {
  const store = useMemo(() => initializeApollo(initialState), [initialState])
  return store
}
